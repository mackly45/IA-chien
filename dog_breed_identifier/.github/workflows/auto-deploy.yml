name: Déploiement Automatique avec Versioning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Configuration de Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Exécution des tests
      run: |
        python manage.py test

  versioning:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
        
    - name: Configuration de Git
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        
    - name: Calcul du numéro de version
      id: version
      run: |
        # Compter le nombre de commits
        COMMIT_COUNT=$(git rev-list --count HEAD)
        VERSION="v1.0.${COMMIT_COUNT}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
    - name: Mise à jour du numéro de version dans README
      run: |
        sed -i "s/^## Version.*/## Version ${VERSION}/" README.md
        
    - name: Commit du numéro de version
      run: |
        git add README.md
        git commit -m "Mise à jour automatique de la version : ${VERSION}" || echo "Pas de changements à commiter"
        
    - name: Push de la version
      run: |
        git push origin main

  deploy-render:
    needs: versioning
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Déploiement sur Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        wait-for-success: true

  deploy-dokploy:
    needs: versioning
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Déploiement sur Dokploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DOKPLOY_HOST }}
        username: ${{ secrets.DOKPLOY_USERNAME }}
        key: ${{ secrets.DOKPLOY_SSH_KEY }}
        script: |
          cd /path/to/your/app
          git pull origin main
          pip install -r requirements.txt
          python manage.py migrate
          python manage.py collectstatic --noinput
          sudo systemctl restart your-app-service